plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower-mini' version '1.1.0'
    id 'org.cadixdev.licenser' version '0.6.1'
	id 'idea'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

// Use version from environment variable, if set
def envVersion = System.getenv('VERSION')
version = envVersion == null ? 'indev' : envVersion

archivesBaseName = "cyanide-fabric-${minecraft_version}"
group = 'com.github.alcatrazEscapee'

repositories {
    mavenCentral()
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-1.17.1:2021.10.31@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

loom {
    accessWidenerPath = file("src/main/resources/cyanide.accesswidener")
}

// Automatically apply a license header when running checkLicense / updateLicense
license {
    header = project.file('HEADER.txt')

    include '**/*.java'
}

task makeTestDataPack(type: Exec) {
    workingDir "${projectDir}/datapack"
    commandLine 'jar', '-cMf', '../example_datapack.zip', 'pack.mcmeta', 'data'
}