plugins {
    id "java"
    id "idea"
    id "net.minecraftforge.gradle" version "5.1.+"
    id "org.spongepowered.mixin" version "0.7-SNAPSHOT"
    id "org.parchmentmc.librarian.forgegradle" version "1.+"
}

def envVersion = System.getenv("VERSION")
version = envVersion == null ? "0.0.0-indev" : envVersion
archivesBaseName = "${mod_id}-forge-${minecraft_version}"


minecraft {
    mappings channel: "parchment", version: "${parchment_version}-${minecraft_version}"
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file("run")
            ideaModule("${rootProject.name}.${project.name}.main")
            taskName("Client")
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule("${rootProject.name}.${project.name}.main")
            taskName("Server")
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    }

    compileOnly project(":Common")
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json" // No Forge-only mixins to speak of
    config "${mod_id}.common.mixins.json"
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {
    from project(":Common").sourceSets.main.resources
}

jar.finalizedBy("reobfJar")
